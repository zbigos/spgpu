
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12 (git sha1 2156e20)


-- Parsing `src/top.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: src/top.v
Parsing Verilog input from `src/top.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

-- Parsing `src/sphere.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: src/sphere.v
Parsing Verilog input from `src/sphere.v' to AST representation.
Generating RTLIL representation for module `\sphere_renderer'.
Warning: wire '\colorv' is assigned in a block at src/sphere.v:35.13-35.177.
Successfully finished Verilog frontend.

-- Parsing `src/vga_core.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: src/vga_core.v
Parsing Verilog input from `src/vga_core.v' to AST representation.
Generating RTLIL representation for module `\VGAcore'.
Warning: reg '\r' is assigned in a continuous assignment at src/vga_core.v:60.12-60.50.
Warning: reg '\b' is assigned in a continuous assignment at src/vga_core.v:61.12-61.50.
Warning: reg '\g' is assigned in a continuous assignment at src/vga_core.v:62.12-62.50.
Successfully finished Verilog frontend.

-- Parsing `src/vga_pll.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: src/vga_pll.v
Parsing Verilog input from `src/vga_pll.v' to AST representation.
Generating RTLIL representation for module `\vga_pll'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json fpga/vga_tetris.json' --

5. Executing SYNTH_ICE40 pass.

5.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

5.2. Executing HIERARCHY pass (managing design hierarchy).

5.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \VGAcore
Used module:     \sphere_renderer
Used module:     \vga_pll

5.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \VGAcore
Used module:     \sphere_renderer
Used module:     \vga_pll
Removed 0 unused modules.
Warning: Resizing cell port top.spr.top from 32 bits to 21 bits.
Warning: Resizing cell port top.spg.top from 32 bits to 21 bits.
Warning: Resizing cell port top.spb.top from 32 bits to 21 bits.

5.3. Executing PROC pass (convert processes to netlists).

5.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$301 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$294 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$290 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$283 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$280 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$277 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$274 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$271 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$263 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$256 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$252 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$245 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$242 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$239 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$236 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$233 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$src/vga_core.v:64$45 in module VGAcore.
Marked 5 switch rules as full_case in process $proc$src/sphere.v:27$13 in module sphere_renderer.
Removed a total of 0 dead cases.

5.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 25 assignments to connections.

5.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$304'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$300'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$293'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$289'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$282'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$279'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$276'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$273'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$270'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$268'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$266'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$262'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$255'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$251'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$241'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$238'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$235'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$232'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$230'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$src/top.v:29$6'.
  Set init value: \resetn_gen = 4'0000

5.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$301'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$290'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$280'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$274'.
Found async reset \S in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$263'.
Found async reset \R in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$252'.
Found async reset \S in `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$242'.
Found async reset \R in `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$236'.

5.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$304'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$301'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$300'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$294'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$293'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$290'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$289'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$283'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$282'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$280'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$279'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$277'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$276'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$274'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$273'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$271'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$270'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:906$269'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$268'.
Creating decoders for process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:868$267'.
Creating decoders for process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$266'.
Creating decoders for process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$263'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$262'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$256'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$255'.
Creating decoders for process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$252'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$251'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$245'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$242'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$241'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$239'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$238'.
Creating decoders for process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$236'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$235'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$233'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$232'.
Creating decoders for process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:309$231'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Creating decoders for process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$229'.
Creating decoders for process `\VGAcore.$proc$src/vga_core.v:64$45'.
     1/11: $0\proposed_b[3:0]
     2/11: $0\proposed_g[3:0]
     3/11: $0\proposed_r[3:0]
     4/11: $0\hscan_pos[9:0]
     5/11: $0\v_drawing_pixels[0:0]
     6/11: $0\h_drawing_pixels[0:0]
     7/11: $0\vscan_pos[9:0]
     8/11: $0\vreadwire[9:0]
     9/11: $0\hreadwire[9:0]
    10/11: $0\v_sync[0:0]
    11/11: $0\h_sync[0:0]
Creating decoders for process `\sphere_renderer.$proc$src/sphere.v:27$13'.
     1/6: $0\spdcnt[20:0]
     2/6: $0\deltah[0:0]
     3/6: $0\deltav[0:0]
     4/6: $0\current_v[9:0]
     5/6: $0\current_h[9:0]
     6/6: $0\colorv[3:0]
Creating decoders for process `\top.$proc$src/top.v:29$6'.
Creating decoders for process `\top.$proc$src/top.v:39$1'.

5.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$301'.
  created $adff cell `$procdff$580' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$294'.
  created $dff cell `$procdff$581' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$290'.
  created $adff cell `$procdff$582' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$283'.
  created $dff cell `$procdff$583' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$280'.
  created $adff cell `$procdff$584' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$277'.
  created $dff cell `$procdff$585' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$274'.
  created $adff cell `$procdff$586' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$271'.
  created $dff cell `$procdff$587' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:906$269'.
  created $dff cell `$procdff$588' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:868$267'.
  created $dff cell `$procdff$589' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$263'.
  created $adff cell `$procdff$590' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$256'.
  created $dff cell `$procdff$591' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$252'.
  created $adff cell `$procdff$592' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$245'.
  created $dff cell `$procdff$593' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$242'.
  created $adff cell `$procdff$594' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$239'.
  created $dff cell `$procdff$595' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$236'.
  created $adff cell `$procdff$596' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$233'.
  created $dff cell `$procdff$597' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:309$231'.
  created $dff cell `$procdff$598' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$229'.
  created $dff cell `$procdff$599' with positive edge clock.
Creating register for signal `\VGAcore.\h_sync' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$600' with positive edge clock.
Creating register for signal `\VGAcore.\v_sync' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$601' with positive edge clock.
Creating register for signal `\VGAcore.\hreadwire' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$602' with positive edge clock.
Creating register for signal `\VGAcore.\vreadwire' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$603' with positive edge clock.
Creating register for signal `\VGAcore.\hscan_pos' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$604' with positive edge clock.
Creating register for signal `\VGAcore.\vscan_pos' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$605' with positive edge clock.
Creating register for signal `\VGAcore.\proposed_r' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$606' with positive edge clock.
Creating register for signal `\VGAcore.\proposed_b' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$607' with positive edge clock.
Creating register for signal `\VGAcore.\proposed_g' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$608' with positive edge clock.
Creating register for signal `\VGAcore.\h_drawing_pixels' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$609' with positive edge clock.
Creating register for signal `\VGAcore.\v_drawing_pixels' using process `\VGAcore.$proc$src/vga_core.v:64$45'.
  created $dff cell `$procdff$610' with positive edge clock.
Creating register for signal `\sphere_renderer.\colorv' using process `\sphere_renderer.$proc$src/sphere.v:27$13'.
  created $dff cell `$procdff$611' with positive edge clock.
Creating register for signal `\sphere_renderer.\current_h' using process `\sphere_renderer.$proc$src/sphere.v:27$13'.
  created $dff cell `$procdff$612' with positive edge clock.
Creating register for signal `\sphere_renderer.\current_v' using process `\sphere_renderer.$proc$src/sphere.v:27$13'.
  created $dff cell `$procdff$613' with positive edge clock.
Creating register for signal `\sphere_renderer.\deltav' using process `\sphere_renderer.$proc$src/sphere.v:27$13'.
  created $dff cell `$procdff$614' with positive edge clock.
Creating register for signal `\sphere_renderer.\deltah' using process `\sphere_renderer.$proc$src/sphere.v:27$13'.
  created $dff cell `$procdff$615' with positive edge clock.
Creating register for signal `\sphere_renderer.\spdcnt' using process `\sphere_renderer.$proc$src/sphere.v:27$13'.
  created $dff cell `$procdff$616' with positive edge clock.
Creating register for signal `\top.\resetn_gen' using process `\top.$proc$src/top.v:39$1'.
  created $dff cell `$procdff$617' with positive edge clock.
Creating register for signal `\top.\reset' using process `\top.$proc$src/top.v:39$1'.
  created $dff cell `$procdff$618' with positive edge clock.

5.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$304'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$301'.
Removing empty process `SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$301'.
Removing empty process `SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$300'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$294'.
Removing empty process `SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$294'.
Removing empty process `SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$293'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$290'.
Removing empty process `SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$290'.
Removing empty process `SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$289'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$283'.
Removing empty process `SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$283'.
Removing empty process `SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$282'.
Removing empty process `SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$280'.
Removing empty process `SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$279'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$277'.
Removing empty process `SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$277'.
Removing empty process `SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$276'.
Removing empty process `SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$274'.
Removing empty process `SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$273'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$271'.
Removing empty process `SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$271'.
Removing empty process `SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$270'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:906$269'.
Removing empty process `SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:906$269'.
Removing empty process `SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$268'.
Removing empty process `SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:868$267'.
Removing empty process `SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$266'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$263'.
Removing empty process `SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$263'.
Removing empty process `SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$262'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$256'.
Removing empty process `SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$256'.
Removing empty process `SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$255'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$252'.
Removing empty process `SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$252'.
Removing empty process `SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$251'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$245'.
Removing empty process `SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$245'.
Removing empty process `SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Removing empty process `SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$242'.
Removing empty process `SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$241'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$239'.
Removing empty process `SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$239'.
Removing empty process `SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$238'.
Removing empty process `SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$236'.
Removing empty process `SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$235'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$233'.
Removing empty process `SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$233'.
Removing empty process `SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$232'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:309$231'.
Removing empty process `SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:309$231'.
Removing empty process `SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Removing empty process `SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$229'.
Found and cleaned up 3 empty switches in `\VGAcore.$proc$src/vga_core.v:64$45'.
Removing empty process `VGAcore.$proc$src/vga_core.v:64$45'.
Found and cleaned up 9 empty switches in `\sphere_renderer.$proc$src/sphere.v:27$13'.
Removing empty process `sphere_renderer.$proc$src/sphere.v:27$13'.
Removing empty process `top.$proc$src/top.v:29$6'.
Removing empty process `top.$proc$src/top.v:39$1'.
Cleaned up 30 empty switches.

5.3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_pll.
Optimizing module VGAcore.
<suppressed ~11 debug messages>
Optimizing module sphere_renderer.
<suppressed ~10 debug messages>
Optimizing module top.

5.4. Executing FLATTEN pass (flatten design).
Deleting now unused module vga_pll.
Deleting now unused module VGAcore.
Deleting now unused module sphere_renderer.
<suppressed ~5 debug messages>

5.5. Executing TRIBUF pass.

5.6. Executing DEMINOUT pass (demote inout ports to input or output).

5.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~6 debug messages>

5.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 140 unused wires.
<suppressed ~10 debug messages>

5.9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Warning: Wire top.\led3 is used but has no driver.
Warning: Wire top.\led2 is used but has no driver.
Warning: Wire top.\led1 is used but has no driver.
Found and reported 3 problems.

5.10. Executing OPT pass (performing simple optimizations).

5.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

5.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

5.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.10.6. Executing OPT_DFF pass (perform DFF optimizations).

5.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

5.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.10.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

5.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.10.13. Executing OPT_DFF pass (perform DFF optimizations).

5.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.10.16. Finished OPT passes. (There is nothing left to do.)

5.11. Executing FSM pass (extract and optimize FSM).

5.11.1. Executing FSM_DETECT pass (finding FSMs in design).

5.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.12. Executing OPT pass (performing simple optimizations).

5.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

5.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\spr.$procdff$616 ($dff) from module top (D = $flatten\spr.$procmux$528_Y, Q = \spr.spdcnt, rval = 21'000000000000000000000).
Adding SRST signal on $flatten\spr.$procdff$615 ($dff) from module top (D = $flatten\spr.$procmux$538_Y, Q = \spr.deltah, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$620 ($sdff) from module top (D = $flatten\spr.$procmux$536_Y, Q = \spr.deltah).
Adding SRST signal on $flatten\spr.$procdff$614 ($dff) from module top (D = $flatten\spr.$procmux$548_Y, Q = \spr.deltav, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$626 ($sdff) from module top (D = $flatten\spr.$procmux$546_Y, Q = \spr.deltav).
Adding SRST signal on $flatten\spr.$procdff$613 ($dff) from module top (D = $flatten\spr.$procmux$560_Y, Q = \spr.current_v, rval = 10'0010000000).
Adding EN signal on $auto$ff.cc:262:slice$632 ($sdff) from module top (D = $flatten\spr.$procmux$555_Y, Q = \spr.current_v).
Adding SRST signal on $flatten\spr.$procdff$612 ($dff) from module top (D = $flatten\spr.$procmux$572_Y, Q = \spr.current_h, rval = 10'0010000000).
Adding EN signal on $auto$ff.cc:262:slice$638 ($sdff) from module top (D = $flatten\spr.$procmux$567_Y, Q = \spr.current_h).
Adding EN signal on $flatten\spr.$procdff$611 ($dff) from module top (D = $flatten\spr.$ternary$src/sphere.v:35$28_Y [3:0], Q = \spr.colorv).
Adding SRST signal on $auto$ff.cc:262:slice$644 ($dffe) from module top (D = $flatten\spr.$ternary$src/sphere.v:35$26_Y [3:0], Q = \spr.colorv, rval = 4'1111).
Adding SRST signal on $flatten\spg.$procdff$616 ($dff) from module top (D = $flatten\spg.$procmux$528_Y, Q = \spg.spdcnt, rval = 21'000000000000000000000).
Adding SRST signal on $flatten\spg.$procdff$615 ($dff) from module top (D = $flatten\spg.$procmux$538_Y, Q = \spg.deltah, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$647 ($sdff) from module top (D = $flatten\spg.$procmux$536_Y, Q = \spg.deltah).
Adding SRST signal on $flatten\spg.$procdff$614 ($dff) from module top (D = $flatten\spg.$procmux$548_Y, Q = \spg.deltav, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$653 ($sdff) from module top (D = $flatten\spg.$procmux$546_Y, Q = \spg.deltav).
Adding SRST signal on $flatten\spg.$procdff$613 ($dff) from module top (D = $flatten\spg.$procmux$560_Y, Q = \spg.current_v, rval = 10'0010000000).
Adding EN signal on $auto$ff.cc:262:slice$659 ($sdff) from module top (D = $flatten\spg.$procmux$555_Y, Q = \spg.current_v).
Adding SRST signal on $flatten\spg.$procdff$612 ($dff) from module top (D = $flatten\spg.$procmux$572_Y, Q = \spg.current_h, rval = 10'0010000000).
Adding EN signal on $auto$ff.cc:262:slice$665 ($sdff) from module top (D = $flatten\spg.$procmux$567_Y, Q = \spg.current_h).
Adding EN signal on $flatten\spg.$procdff$611 ($dff) from module top (D = $flatten\spg.$ternary$src/sphere.v:35$28_Y [3:0], Q = \spg.colorv).
Adding SRST signal on $auto$ff.cc:262:slice$671 ($dffe) from module top (D = $flatten\spg.$ternary$src/sphere.v:35$26_Y [3:0], Q = \spg.colorv, rval = 4'1111).
Adding SRST signal on $flatten\spb.$procdff$616 ($dff) from module top (D = $flatten\spb.$procmux$528_Y, Q = \spb.spdcnt, rval = 21'000000000000000000000).
Adding SRST signal on $flatten\spb.$procdff$615 ($dff) from module top (D = $flatten\spb.$procmux$538_Y, Q = \spb.deltah, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$674 ($sdff) from module top (D = $flatten\spb.$procmux$536_Y, Q = \spb.deltah).
Adding SRST signal on $flatten\spb.$procdff$614 ($dff) from module top (D = $flatten\spb.$procmux$548_Y, Q = \spb.deltav, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$680 ($sdff) from module top (D = $flatten\spb.$procmux$546_Y, Q = \spb.deltav).
Adding SRST signal on $flatten\spb.$procdff$613 ($dff) from module top (D = $flatten\spb.$procmux$560_Y, Q = \spb.current_v, rval = 10'0010000000).
Adding EN signal on $auto$ff.cc:262:slice$686 ($sdff) from module top (D = $flatten\spb.$procmux$555_Y, Q = \spb.current_v).
Adding SRST signal on $flatten\spb.$procdff$612 ($dff) from module top (D = $flatten\spb.$procmux$572_Y, Q = \spb.current_h, rval = 10'0010000000).
Adding EN signal on $auto$ff.cc:262:slice$692 ($sdff) from module top (D = $flatten\spb.$procmux$567_Y, Q = \spb.current_h).
Adding EN signal on $flatten\spb.$procdff$611 ($dff) from module top (D = $flatten\spb.$ternary$src/sphere.v:35$28_Y [3:0], Q = \spb.colorv).
Adding SRST signal on $auto$ff.cc:262:slice$698 ($dffe) from module top (D = $flatten\spb.$ternary$src/sphere.v:35$26_Y [3:0], Q = \spb.colorv, rval = 4'1111).
Adding EN signal on $flatten\core.$procdff$610 ($dff) from module top (D = $flatten\core.$lt$src/vga_core.v:82$49_Y, Q = \core.v_drawing_pixels).
Adding EN signal on $flatten\core.$procdff$609 ($dff) from module top (D = $flatten\core.$lt$src/vga_core.v:81$48_Y, Q = \core.h_drawing_pixels).
Adding SRST signal on $flatten\core.$procdff$608 ($dff) from module top (D = \spg.colorv, Q = \core.proposed_g, rval = 4'0000).
Adding SRST signal on $flatten\core.$procdff$607 ($dff) from module top (D = \spb.colorv, Q = \core.proposed_b, rval = 4'0000).
Adding SRST signal on $flatten\core.$procdff$606 ($dff) from module top (D = \spr.colorv, Q = \core.proposed_r, rval = 4'0000).
Adding SRST signal on $flatten\core.$procdff$605 ($dff) from module top (D = $flatten\core.$procmux$505_Y, Q = \core.vscan_pos, rval = 10'0000000000).
Adding EN signal on $auto$ff.cc:262:slice$705 ($sdff) from module top (D = $flatten\core.$add$src/vga_core.v:89$59_Y, Q = \core.vscan_pos).
Adding SRST signal on $flatten\core.$procdff$604 ($dff) from module top (D = $flatten\core.$add$src/vga_core.v:79$47_Y, Q = \core.hscan_pos, rval = 10'0000000000).
Adding EN signal on $flatten\core.$procdff$603 ($dff) from module top (D = \core.vscan_pos, Q = \core.vreadwire).
Adding EN signal on $flatten\core.$procdff$602 ($dff) from module top (D = \core.hscan_pos, Q = \core.hreadwire).
Adding EN signal on $flatten\core.$procdff$601 ($dff) from module top (D = $flatten\core.$logic_not$src/vga_core.v:85$57_Y, Q = \core.v_sync).
Adding EN signal on $flatten\core.$procdff$600 ($dff) from module top (D = $flatten\core.$logic_not$src/vga_core.v:84$53_Y, Q = \core.h_sync).

5.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 53 unused cells and 53 unused wires.
<suppressed ~54 debug messages>

5.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~6 debug messages>

5.12.9. Rerunning OPT passes. (Maybe there is more to do..)

5.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

5.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

5.12.13. Executing OPT_DFF pass (perform DFF optimizations).

5.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

5.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.12.16. Rerunning OPT passes. (Maybe there is more to do..)

5.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

5.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.12.20. Executing OPT_DFF pass (perform DFF optimizations).

5.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.12.23. Finished OPT passes. (There is nothing left to do.)

5.13. Executing WREDUCE pass (reducing word size of cells).
Removed cell top.$flatten\spb.$procmux$544 ($mux).
Removed cell top.$flatten\spb.$procmux$534 ($mux).
Removed top 2 bits (of 21) from port B of cell top.$flatten\spb.$gt$src/sphere.v:50$35 ($gt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\spb.$gt$src/sphere.v:47$34 ($gt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\spb.$gt$src/sphere.v:44$33 ($gt).
Removed top 26 bits (of 32) from port B of cell top.$flatten\spb.$lt$src/sphere.v:41$32 ($lt).
Removed top 26 bits (of 32) from port B of cell top.$flatten\spb.$lt$src/sphere.v:38$31 ($lt).
Removed top 2 bits (of 21) from port B of cell top.$flatten\spb.$eq$src/sphere.v:36$29 ($eq).
Removed top 28 bits (of 32) from mux cell top.$flatten\spb.$ternary$src/sphere.v:35$26 ($mux).
Removed top 27 bits (of 32) from port A of cell top.$flatten\spb.$sub$src/sphere.v:35$24 ($sub).
Removed top 7 bits (of 32) from port B of cell top.$flatten\spb.$sub$src/sphere.v:35$24 ($sub).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\spb.$sub$src/sphere.v:35$24 ($sub).
Removed top 4 bits (of 5) from port A of cell top.$flatten\spb.$sub$src/sphere.v:35$24 ($sub).
Removed top 21 bits (of 25) from port B of cell top.$flatten\spb.$sub$src/sphere.v:35$24 ($sub).
Removed top 11 bits (of 21) from port B of cell top.$flatten\spb.$sub$src/sphere.v:35$22 ($sub).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\spb.$sub$src/sphere.v:35$22 ($sub).
Removed top 21 bits (of 32) from port A of cell top.$flatten\spb.$sub$src/sphere.v:35$22 ($sub).
Removed top 9 bits (of 21) from port B of cell top.$flatten\spb.$lt$src/sphere.v:35$20 ($lt).
Removed top 22 bits (of 32) from port A of cell top.$flatten\spb.$gt$src/sphere.v:35$17 ($gt).
Removed top 10 bits (of 32) from port Y of cell top.$flatten\spb.$add$src/sphere.v:35$16 ($add).
Removed top 10 bits (of 21) from port Y of cell top.$flatten\spb.$sub$src/sphere.v:18$10 ($sub).
Removed top 10 bits (of 21) from port Y of cell top.$flatten\spb.$sub$src/sphere.v:16$7 ($sub).
Removed cell top.$flatten\spg.$procmux$544 ($mux).
Removed cell top.$flatten\spg.$procmux$534 ($mux).
Removed top 3 bits (of 21) from port B of cell top.$flatten\spg.$gt$src/sphere.v:50$35 ($gt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\spg.$gt$src/sphere.v:47$34 ($gt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\spg.$gt$src/sphere.v:44$33 ($gt).
Removed top 26 bits (of 32) from port B of cell top.$flatten\spg.$lt$src/sphere.v:41$32 ($lt).
Removed top 26 bits (of 32) from port B of cell top.$flatten\spg.$lt$src/sphere.v:38$31 ($lt).
Removed top 3 bits (of 21) from port B of cell top.$flatten\spg.$eq$src/sphere.v:36$29 ($eq).
Removed top 28 bits (of 32) from mux cell top.$flatten\spg.$ternary$src/sphere.v:35$26 ($mux).
Removed top 27 bits (of 32) from port A of cell top.$flatten\spg.$sub$src/sphere.v:35$24 ($sub).
Removed top 7 bits (of 32) from port B of cell top.$flatten\spg.$sub$src/sphere.v:35$24 ($sub).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\spg.$sub$src/sphere.v:35$24 ($sub).
Removed top 4 bits (of 5) from port A of cell top.$flatten\spg.$sub$src/sphere.v:35$24 ($sub).
Removed top 21 bits (of 25) from port B of cell top.$flatten\spg.$sub$src/sphere.v:35$24 ($sub).
Removed top 11 bits (of 21) from port B of cell top.$flatten\spg.$sub$src/sphere.v:35$22 ($sub).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\spg.$sub$src/sphere.v:35$22 ($sub).
Removed top 21 bits (of 32) from port A of cell top.$flatten\spg.$sub$src/sphere.v:35$22 ($sub).
Removed top 9 bits (of 21) from port B of cell top.$flatten\spg.$lt$src/sphere.v:35$20 ($lt).
Removed top 22 bits (of 32) from port A of cell top.$flatten\spg.$gt$src/sphere.v:35$17 ($gt).
Removed top 10 bits (of 32) from port Y of cell top.$flatten\spg.$add$src/sphere.v:35$16 ($add).
Removed top 10 bits (of 21) from port Y of cell top.$flatten\spg.$sub$src/sphere.v:18$10 ($sub).
Removed top 10 bits (of 21) from port Y of cell top.$flatten\spg.$sub$src/sphere.v:16$7 ($sub).
Removed cell top.$flatten\spr.$procmux$544 ($mux).
Removed cell top.$flatten\spr.$procmux$534 ($mux).
Removed top 2 bits (of 21) from port B of cell top.$flatten\spr.$gt$src/sphere.v:50$35 ($gt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\spr.$gt$src/sphere.v:47$34 ($gt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\spr.$gt$src/sphere.v:44$33 ($gt).
Removed top 26 bits (of 32) from port B of cell top.$flatten\spr.$lt$src/sphere.v:41$32 ($lt).
Removed top 26 bits (of 32) from port B of cell top.$flatten\spr.$lt$src/sphere.v:38$31 ($lt).
Removed top 2 bits (of 21) from port B of cell top.$flatten\spr.$eq$src/sphere.v:36$29 ($eq).
Removed top 28 bits (of 32) from mux cell top.$flatten\spr.$ternary$src/sphere.v:35$26 ($mux).
Removed top 27 bits (of 32) from port A of cell top.$flatten\spr.$sub$src/sphere.v:35$24 ($sub).
Removed top 7 bits (of 32) from port B of cell top.$flatten\spr.$sub$src/sphere.v:35$24 ($sub).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\spr.$sub$src/sphere.v:35$24 ($sub).
Removed top 4 bits (of 5) from port A of cell top.$flatten\spr.$sub$src/sphere.v:35$24 ($sub).
Removed top 21 bits (of 25) from port B of cell top.$flatten\spr.$sub$src/sphere.v:35$24 ($sub).
Removed top 11 bits (of 21) from port B of cell top.$flatten\spr.$sub$src/sphere.v:35$22 ($sub).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\spr.$sub$src/sphere.v:35$22 ($sub).
Removed top 21 bits (of 32) from port A of cell top.$flatten\spr.$sub$src/sphere.v:35$22 ($sub).
Removed top 9 bits (of 21) from port B of cell top.$flatten\spr.$lt$src/sphere.v:35$20 ($lt).
Removed top 22 bits (of 32) from port A of cell top.$flatten\spr.$gt$src/sphere.v:35$17 ($gt).
Removed top 10 bits (of 32) from port Y of cell top.$flatten\spr.$add$src/sphere.v:35$16 ($add).
Removed top 10 bits (of 21) from port Y of cell top.$flatten\spr.$sub$src/sphere.v:18$10 ($sub).
Removed top 10 bits (of 21) from port Y of cell top.$flatten\spr.$sub$src/sphere.v:16$7 ($sub).
Removed top 23 bits (of 32) from port B of cell top.$flatten\core.$lt$src/vga_core.v:85$55 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\core.$ge$src/vga_core.v:85$54 ($ge).
Removed top 22 bits (of 32) from port B of cell top.$flatten\core.$lt$src/vga_core.v:84$51 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\core.$ge$src/vga_core.v:84$50 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\core.$lt$src/vga_core.v:82$49 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\core.$lt$src/vga_core.v:81$48 ($lt).
Removed top 10 bits (of 32) from port B of cell top.$flatten\spb.$gt$src/sphere.v:35$17 ($gt).
Removed top 10 bits (of 32) from port B of cell top.$flatten\spg.$gt$src/sphere.v:35$17 ($gt).
Removed top 10 bits (of 32) from port B of cell top.$flatten\spr.$gt$src/sphere.v:35$17 ($gt).
Removed top 10 bits (of 32) from wire top.$flatten\spb.$add$src/sphere.v:35$16_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spb.$div$src/sphere.v:35$23_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spb.$sub$src/sphere.v:35$24_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spb.$ternary$src/sphere.v:35$26_Y.
Removed top 10 bits (of 32) from wire top.$flatten\spg.$add$src/sphere.v:35$16_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spg.$div$src/sphere.v:35$23_Y.
Removed top 25 bits (of 32) from wire top.$flatten\spg.$sub$src/sphere.v:35$22_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spg.$sub$src/sphere.v:35$24_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spg.$ternary$src/sphere.v:35$26_Y.
Removed top 10 bits (of 32) from wire top.$flatten\spr.$add$src/sphere.v:35$16_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spr.$div$src/sphere.v:35$23_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spr.$sub$src/sphere.v:35$24_Y.
Removed top 28 bits (of 32) from wire top.$flatten\spr.$ternary$src/sphere.v:35$26_Y.

5.14. Executing PEEPOPT pass (run peephole optimizers).

5.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

5.16. Executing SHARE pass (SAT-based resource sharing).

5.17. Executing TECHMAP pass (map to technology primitives).

5.17.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

5.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~374 debug messages>

5.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\core.$add$src/vga_core.v:79$47 ($add).
  creating $macc model for $flatten\core.$add$src/vga_core.v:89$59 ($add).
  creating $macc model for $flatten\spb.$add$src/sphere.v:35$16 ($add).
  creating $macc model for $flatten\spb.$add$src/sphere.v:35$18 ($add).
  creating $macc model for $flatten\spb.$add$src/sphere.v:37$30 ($add).
  creating $macc model for $flatten\spb.$add$src/sphere.v:52$36 ($add).
  creating $macc model for $flatten\spb.$add$src/sphere.v:58$38 ($add).
  creating $macc model for $flatten\spb.$mul$src/sphere.v:16$9 ($mul).
  creating $macc model for $flatten\spb.$mul$src/sphere.v:18$12 ($mul).
  creating $macc model for $flatten\spb.$sub$src/sphere.v:16$7 ($sub).
  creating $macc model for $flatten\spb.$sub$src/sphere.v:18$10 ($sub).
  creating $macc model for $flatten\spb.$sub$src/sphere.v:35$22 ($sub).
  creating $macc model for $flatten\spb.$sub$src/sphere.v:35$24 ($sub).
  creating $macc model for $flatten\spb.$sub$src/sphere.v:54$37 ($sub).
  creating $macc model for $flatten\spb.$sub$src/sphere.v:60$39 ($sub).
  creating $macc model for $flatten\spg.$add$src/sphere.v:35$16 ($add).
  creating $macc model for $flatten\spg.$add$src/sphere.v:35$18 ($add).
  creating $macc model for $flatten\spg.$add$src/sphere.v:37$30 ($add).
  creating $macc model for $flatten\spg.$add$src/sphere.v:52$36 ($add).
  creating $macc model for $flatten\spg.$add$src/sphere.v:58$38 ($add).
  creating $macc model for $flatten\spg.$mul$src/sphere.v:16$9 ($mul).
  creating $macc model for $flatten\spg.$mul$src/sphere.v:18$12 ($mul).
  creating $macc model for $flatten\spg.$sub$src/sphere.v:16$7 ($sub).
  creating $macc model for $flatten\spg.$sub$src/sphere.v:18$10 ($sub).
  creating $macc model for $flatten\spg.$sub$src/sphere.v:35$22 ($sub).
  creating $macc model for $flatten\spg.$sub$src/sphere.v:35$24 ($sub).
  creating $macc model for $flatten\spg.$sub$src/sphere.v:54$37 ($sub).
  creating $macc model for $flatten\spg.$sub$src/sphere.v:60$39 ($sub).
  creating $macc model for $flatten\spr.$add$src/sphere.v:35$16 ($add).
  creating $macc model for $flatten\spr.$add$src/sphere.v:35$18 ($add).
  creating $macc model for $flatten\spr.$add$src/sphere.v:37$30 ($add).
  creating $macc model for $flatten\spr.$add$src/sphere.v:52$36 ($add).
  creating $macc model for $flatten\spr.$add$src/sphere.v:58$38 ($add).
  creating $macc model for $flatten\spr.$mul$src/sphere.v:16$9 ($mul).
  creating $macc model for $flatten\spr.$mul$src/sphere.v:18$12 ($mul).
  creating $macc model for $flatten\spr.$sub$src/sphere.v:16$7 ($sub).
  creating $macc model for $flatten\spr.$sub$src/sphere.v:18$10 ($sub).
  creating $macc model for $flatten\spr.$sub$src/sphere.v:35$22 ($sub).
  creating $macc model for $flatten\spr.$sub$src/sphere.v:35$24 ($sub).
  creating $macc model for $flatten\spr.$sub$src/sphere.v:54$37 ($sub).
  creating $macc model for $flatten\spr.$sub$src/sphere.v:60$39 ($sub).
  creating $alu model for $macc $flatten\spr.$sub$src/sphere.v:60$39.
  creating $alu model for $macc $flatten\spr.$sub$src/sphere.v:54$37.
  creating $alu model for $macc $flatten\spr.$sub$src/sphere.v:35$24.
  creating $alu model for $macc $flatten\spr.$sub$src/sphere.v:35$22.
  creating $alu model for $macc $flatten\spr.$sub$src/sphere.v:18$10.
  creating $alu model for $macc $flatten\spr.$sub$src/sphere.v:16$7.
  creating $alu model for $macc $flatten\spr.$add$src/sphere.v:58$38.
  creating $alu model for $macc $flatten\spr.$add$src/sphere.v:52$36.
  creating $alu model for $macc $flatten\spr.$add$src/sphere.v:37$30.
  creating $alu model for $macc $flatten\spr.$add$src/sphere.v:35$18.
  creating $alu model for $macc $flatten\spr.$add$src/sphere.v:35$16.
  creating $alu model for $macc $flatten\spg.$sub$src/sphere.v:60$39.
  creating $alu model for $macc $flatten\spg.$sub$src/sphere.v:54$37.
  creating $alu model for $macc $flatten\spg.$sub$src/sphere.v:35$24.
  creating $alu model for $macc $flatten\spg.$sub$src/sphere.v:35$22.
  creating $alu model for $macc $flatten\spg.$sub$src/sphere.v:18$10.
  creating $alu model for $macc $flatten\spg.$sub$src/sphere.v:16$7.
  creating $alu model for $macc $flatten\spg.$add$src/sphere.v:58$38.
  creating $alu model for $macc $flatten\spg.$add$src/sphere.v:52$36.
  creating $alu model for $macc $flatten\spg.$add$src/sphere.v:37$30.
  creating $alu model for $macc $flatten\spg.$add$src/sphere.v:35$18.
  creating $alu model for $macc $flatten\spg.$add$src/sphere.v:35$16.
  creating $alu model for $macc $flatten\spb.$sub$src/sphere.v:60$39.
  creating $alu model for $macc $flatten\spb.$sub$src/sphere.v:54$37.
  creating $alu model for $macc $flatten\spb.$sub$src/sphere.v:35$24.
  creating $alu model for $macc $flatten\spb.$sub$src/sphere.v:35$22.
  creating $alu model for $macc $flatten\spb.$sub$src/sphere.v:18$10.
  creating $alu model for $macc $flatten\spb.$sub$src/sphere.v:16$7.
  creating $alu model for $macc $flatten\spb.$add$src/sphere.v:58$38.
  creating $alu model for $macc $flatten\spb.$add$src/sphere.v:52$36.
  creating $alu model for $macc $flatten\spb.$add$src/sphere.v:37$30.
  creating $alu model for $macc $flatten\spb.$add$src/sphere.v:35$18.
  creating $alu model for $macc $flatten\spb.$add$src/sphere.v:35$16.
  creating $alu model for $macc $flatten\core.$add$src/vga_core.v:89$59.
  creating $alu model for $macc $flatten\core.$add$src/vga_core.v:79$47.
  creating $macc cell for $flatten\spg.$mul$src/sphere.v:18$12: $auto$alumacc.cc:365:replace_macc$734
  creating $macc cell for $flatten\spg.$mul$src/sphere.v:16$9: $auto$alumacc.cc:365:replace_macc$735
  creating $macc cell for $flatten\spr.$mul$src/sphere.v:16$9: $auto$alumacc.cc:365:replace_macc$736
  creating $macc cell for $flatten\spb.$mul$src/sphere.v:18$12: $auto$alumacc.cc:365:replace_macc$737
  creating $macc cell for $flatten\spb.$mul$src/sphere.v:16$9: $auto$alumacc.cc:365:replace_macc$738
  creating $macc cell for $flatten\spr.$mul$src/sphere.v:18$12: $auto$alumacc.cc:365:replace_macc$739
  creating $alu model for $flatten\core.$ge$src/vga_core.v:84$50 ($ge): new $alu
  creating $alu model for $flatten\core.$ge$src/vga_core.v:85$54 ($ge): new $alu
  creating $alu model for $flatten\core.$lt$src/vga_core.v:81$48 ($lt): new $alu
  creating $alu model for $flatten\core.$lt$src/vga_core.v:82$49 ($lt): new $alu
  creating $alu model for $flatten\core.$lt$src/vga_core.v:84$51 ($lt): new $alu
  creating $alu model for $flatten\core.$lt$src/vga_core.v:85$55 ($lt): new $alu
  creating $alu model for $flatten\spb.$gt$src/sphere.v:35$17 ($gt): new $alu
  creating $alu model for $flatten\spb.$gt$src/sphere.v:44$33 ($gt): new $alu
  creating $alu model for $flatten\spb.$gt$src/sphere.v:47$34 ($gt): new $alu
  creating $alu model for $flatten\spb.$gt$src/sphere.v:50$35 ($gt): new $alu
  creating $alu model for $flatten\spb.$lt$src/sphere.v:35$20 ($lt): new $alu
  creating $alu model for $flatten\spb.$lt$src/sphere.v:38$31 ($lt): new $alu
  creating $alu model for $flatten\spb.$lt$src/sphere.v:41$32 ($lt): new $alu
  creating $alu model for $flatten\spg.$gt$src/sphere.v:35$17 ($gt): new $alu
  creating $alu model for $flatten\spg.$gt$src/sphere.v:44$33 ($gt): new $alu
  creating $alu model for $flatten\spg.$gt$src/sphere.v:47$34 ($gt): new $alu
  creating $alu model for $flatten\spg.$gt$src/sphere.v:50$35 ($gt): new $alu
  creating $alu model for $flatten\spg.$lt$src/sphere.v:35$20 ($lt): new $alu
  creating $alu model for $flatten\spg.$lt$src/sphere.v:38$31 ($lt): new $alu
  creating $alu model for $flatten\spg.$lt$src/sphere.v:41$32 ($lt): new $alu
  creating $alu model for $flatten\spr.$gt$src/sphere.v:35$17 ($gt): new $alu
  creating $alu model for $flatten\spr.$gt$src/sphere.v:44$33 ($gt): new $alu
  creating $alu model for $flatten\spr.$gt$src/sphere.v:47$34 ($gt): new $alu
  creating $alu model for $flatten\spr.$gt$src/sphere.v:50$35 ($gt): new $alu
  creating $alu model for $flatten\spr.$lt$src/sphere.v:35$20 ($lt): new $alu
  creating $alu model for $flatten\spr.$lt$src/sphere.v:38$31 ($lt): new $alu
  creating $alu model for $flatten\spr.$lt$src/sphere.v:41$32 ($lt): new $alu
  creating $alu model for $flatten\spb.$eq$src/sphere.v:36$29 ($eq): merged with $flatten\spb.$gt$src/sphere.v:50$35.
  creating $alu model for $flatten\spg.$eq$src/sphere.v:36$29 ($eq): merged with $flatten\spg.$gt$src/sphere.v:50$35.
  creating $alu model for $flatten\spr.$eq$src/sphere.v:36$29 ($eq): merged with $flatten\spr.$gt$src/sphere.v:50$35.
  creating $alu cell for $flatten\spr.$lt$src/sphere.v:41$32: $auto$alumacc.cc:485:replace_alu$767
  creating $alu cell for $flatten\spr.$lt$src/sphere.v:38$31: $auto$alumacc.cc:485:replace_alu$778
  creating $alu cell for $flatten\spr.$lt$src/sphere.v:35$20: $auto$alumacc.cc:485:replace_alu$789
  creating $alu cell for $flatten\spr.$gt$src/sphere.v:50$35, $flatten\spr.$eq$src/sphere.v:36$29: $auto$alumacc.cc:485:replace_alu$800
  creating $alu cell for $flatten\spr.$gt$src/sphere.v:47$34: $auto$alumacc.cc:485:replace_alu$807
  creating $alu cell for $flatten\spr.$gt$src/sphere.v:44$33: $auto$alumacc.cc:485:replace_alu$818
  creating $alu cell for $flatten\spr.$gt$src/sphere.v:35$17: $auto$alumacc.cc:485:replace_alu$823
  creating $alu cell for $flatten\spg.$lt$src/sphere.v:41$32: $auto$alumacc.cc:485:replace_alu$834
  creating $alu cell for $flatten\spg.$lt$src/sphere.v:38$31: $auto$alumacc.cc:485:replace_alu$845
  creating $alu cell for $flatten\spg.$lt$src/sphere.v:35$20: $auto$alumacc.cc:485:replace_alu$856
  creating $alu cell for $flatten\spg.$gt$src/sphere.v:50$35, $flatten\spg.$eq$src/sphere.v:36$29: $auto$alumacc.cc:485:replace_alu$867
  creating $alu cell for $flatten\spg.$gt$src/sphere.v:47$34: $auto$alumacc.cc:485:replace_alu$874
  creating $alu cell for $flatten\spg.$gt$src/sphere.v:44$33: $auto$alumacc.cc:485:replace_alu$885
  creating $alu cell for $flatten\spg.$gt$src/sphere.v:35$17: $auto$alumacc.cc:485:replace_alu$890
  creating $alu cell for $flatten\spb.$lt$src/sphere.v:41$32: $auto$alumacc.cc:485:replace_alu$901
  creating $alu cell for $flatten\spb.$lt$src/sphere.v:38$31: $auto$alumacc.cc:485:replace_alu$912
  creating $alu cell for $flatten\spb.$lt$src/sphere.v:35$20: $auto$alumacc.cc:485:replace_alu$923
  creating $alu cell for $flatten\spb.$gt$src/sphere.v:50$35, $flatten\spb.$eq$src/sphere.v:36$29: $auto$alumacc.cc:485:replace_alu$934
  creating $alu cell for $flatten\spb.$gt$src/sphere.v:47$34: $auto$alumacc.cc:485:replace_alu$941
  creating $alu cell for $flatten\spb.$gt$src/sphere.v:44$33: $auto$alumacc.cc:485:replace_alu$952
  creating $alu cell for $flatten\spb.$gt$src/sphere.v:35$17: $auto$alumacc.cc:485:replace_alu$957
  creating $alu cell for $flatten\core.$lt$src/vga_core.v:85$55: $auto$alumacc.cc:485:replace_alu$968
  creating $alu cell for $flatten\core.$lt$src/vga_core.v:84$51: $auto$alumacc.cc:485:replace_alu$979
  creating $alu cell for $flatten\core.$lt$src/vga_core.v:82$49: $auto$alumacc.cc:485:replace_alu$984
  creating $alu cell for $flatten\core.$lt$src/vga_core.v:81$48: $auto$alumacc.cc:485:replace_alu$995
  creating $alu cell for $flatten\core.$ge$src/vga_core.v:85$54: $auto$alumacc.cc:485:replace_alu$1000
  creating $alu cell for $flatten\core.$ge$src/vga_core.v:84$50: $auto$alumacc.cc:485:replace_alu$1009
  creating $alu cell for $flatten\core.$add$src/vga_core.v:79$47: $auto$alumacc.cc:485:replace_alu$1022
  creating $alu cell for $flatten\core.$add$src/vga_core.v:89$59: $auto$alumacc.cc:485:replace_alu$1025
  creating $alu cell for $flatten\spb.$add$src/sphere.v:35$16: $auto$alumacc.cc:485:replace_alu$1028
  creating $alu cell for $flatten\spb.$add$src/sphere.v:35$18: $auto$alumacc.cc:485:replace_alu$1031
  creating $alu cell for $flatten\spb.$add$src/sphere.v:37$30: $auto$alumacc.cc:485:replace_alu$1034
  creating $alu cell for $flatten\spb.$add$src/sphere.v:52$36: $auto$alumacc.cc:485:replace_alu$1037
  creating $alu cell for $flatten\spb.$add$src/sphere.v:58$38: $auto$alumacc.cc:485:replace_alu$1040
  creating $alu cell for $flatten\spb.$sub$src/sphere.v:16$7: $auto$alumacc.cc:485:replace_alu$1043
  creating $alu cell for $flatten\spb.$sub$src/sphere.v:18$10: $auto$alumacc.cc:485:replace_alu$1046
  creating $alu cell for $flatten\spb.$sub$src/sphere.v:35$22: $auto$alumacc.cc:485:replace_alu$1049
  creating $alu cell for $flatten\spb.$sub$src/sphere.v:35$24: $auto$alumacc.cc:485:replace_alu$1052
  creating $alu cell for $flatten\spb.$sub$src/sphere.v:54$37: $auto$alumacc.cc:485:replace_alu$1055
  creating $alu cell for $flatten\spb.$sub$src/sphere.v:60$39: $auto$alumacc.cc:485:replace_alu$1058
  creating $alu cell for $flatten\spg.$add$src/sphere.v:35$16: $auto$alumacc.cc:485:replace_alu$1061
  creating $alu cell for $flatten\spg.$add$src/sphere.v:35$18: $auto$alumacc.cc:485:replace_alu$1064
  creating $alu cell for $flatten\spg.$add$src/sphere.v:37$30: $auto$alumacc.cc:485:replace_alu$1067
  creating $alu cell for $flatten\spg.$add$src/sphere.v:52$36: $auto$alumacc.cc:485:replace_alu$1070
  creating $alu cell for $flatten\spg.$add$src/sphere.v:58$38: $auto$alumacc.cc:485:replace_alu$1073
  creating $alu cell for $flatten\spg.$sub$src/sphere.v:16$7: $auto$alumacc.cc:485:replace_alu$1076
  creating $alu cell for $flatten\spg.$sub$src/sphere.v:18$10: $auto$alumacc.cc:485:replace_alu$1079
  creating $alu cell for $flatten\spg.$sub$src/sphere.v:35$22: $auto$alumacc.cc:485:replace_alu$1082
  creating $alu cell for $flatten\spg.$sub$src/sphere.v:35$24: $auto$alumacc.cc:485:replace_alu$1085
  creating $alu cell for $flatten\spg.$sub$src/sphere.v:54$37: $auto$alumacc.cc:485:replace_alu$1088
  creating $alu cell for $flatten\spg.$sub$src/sphere.v:60$39: $auto$alumacc.cc:485:replace_alu$1091
  creating $alu cell for $flatten\spr.$add$src/sphere.v:35$16: $auto$alumacc.cc:485:replace_alu$1094
  creating $alu cell for $flatten\spr.$add$src/sphere.v:35$18: $auto$alumacc.cc:485:replace_alu$1097
  creating $alu cell for $flatten\spr.$add$src/sphere.v:37$30: $auto$alumacc.cc:485:replace_alu$1100
  creating $alu cell for $flatten\spr.$add$src/sphere.v:52$36: $auto$alumacc.cc:485:replace_alu$1103
  creating $alu cell for $flatten\spr.$add$src/sphere.v:58$38: $auto$alumacc.cc:485:replace_alu$1106
  creating $alu cell for $flatten\spr.$sub$src/sphere.v:16$7: $auto$alumacc.cc:485:replace_alu$1109
  creating $alu cell for $flatten\spr.$sub$src/sphere.v:18$10: $auto$alumacc.cc:485:replace_alu$1112
  creating $alu cell for $flatten\spr.$sub$src/sphere.v:35$22: $auto$alumacc.cc:485:replace_alu$1115
  creating $alu cell for $flatten\spr.$sub$src/sphere.v:35$24: $auto$alumacc.cc:485:replace_alu$1118
  creating $alu cell for $flatten\spr.$sub$src/sphere.v:54$37: $auto$alumacc.cc:485:replace_alu$1121
  creating $alu cell for $flatten\spr.$sub$src/sphere.v:60$39: $auto$alumacc.cc:485:replace_alu$1124
  created 62 $alu and 6 $macc cells.

5.21. Executing OPT pass (performing simple optimizations).

5.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~15 debug messages>

5.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

5.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$685: { $auto$opt_dff.cc:197:make_patterns_logic$682 $auto$alumacc.cc:501:replace_alu$935 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$679: { $auto$opt_dff.cc:197:make_patterns_logic$676 $auto$alumacc.cc:501:replace_alu$935 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$658: { $auto$alumacc.cc:501:replace_alu$868 $auto$opt_dff.cc:197:make_patterns_logic$655 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$652: { $auto$opt_dff.cc:197:make_patterns_logic$649 $auto$alumacc.cc:501:replace_alu$868 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$631: { $auto$alumacc.cc:501:replace_alu$801 $auto$opt_dff.cc:197:make_patterns_logic$628 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$625: { $auto$alumacc.cc:501:replace_alu$801 $auto$opt_dff.cc:197:make_patterns_logic$622 }
  Optimizing cells in module \top.
Performed a total of 6 changes.

5.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.21.6. Executing OPT_DFF pass (perform DFF optimizations).

5.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 6 unused cells and 36 unused wires.
<suppressed ~7 debug messages>

5.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.21.9. Rerunning OPT passes. (Maybe there is more to do..)

5.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

5.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.21.13. Executing OPT_DFF pass (perform DFF optimizations).

5.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.21.16. Finished OPT passes. (There is nothing left to do.)

5.22. Executing MEMORY pass.

5.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.22.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.22.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.22.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.22.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.22.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.22.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.22.9. Executing MEMORY_COLLECT pass (generating $mem cells).

5.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

5.25. Executing TECHMAP pass (map to technology primitives).

5.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

5.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

5.26. Executing ICE40_BRAMINIT pass.

5.27. Executing OPT pass (performing simple optimizations).

5.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~20 debug messages>

5.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

5.27.3. Executing OPT_DFF pass (perform DFF optimizations).

5.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 33 unused cells and 69 unused wires.
<suppressed ~34 debug messages>

5.27.5. Finished fast OPT passes.

5.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.29. Executing OPT pass (performing simple optimizations).

5.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

5.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.29.6. Executing OPT_DFF pass (perform DFF optimizations).

5.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.29.9. Finished OPT passes. (There is nothing left to do.)

5.30. Executing ICE40_WRAPCARRY pass (wrap carries).

5.31. Executing TECHMAP pass (map to technology primitives).

5.31.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.31.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

5.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$350a16b50f723fdde288977a0c5fcdd3e8b66dcf\_80_ice40_alu for cells of type $alu.
Using template $paramod$5de5fbe7c1e0726c07e3a4cebe563a6a1315b736\_80_ice40_alu for cells of type $alu.
Using template $paramod$1eb759649286d7485bd82f4dfc30385bade4b4b3\_80_ice40_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_80_ice40_alu for cells of type $alu.
Using template $paramod$49641a5ace7a8dbedd31c417f5a1b54fcecf6c7d\_80_ice40_alu for cells of type $alu.
Using template $paramod$b928fed4f62ecbedfa495ae14eb69c028928aea4\_80_ice40_alu for cells of type $alu.
Using template $paramod$9c32b45917accb56be6667e7eba7742d064d7fbb\_80_ice40_alu for cells of type $alu.
Using template $paramod$950cc9f9d9b07c09d0ee4a231126f2c8a3c4f78a\_80_ice40_alu for cells of type $alu.
Using template $paramod$dabd763a490b72116fd0366265f1c240490e1c75\_80_ice40_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_80_ice40_alu for cells of type $alu.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_80_ice40_alu for cells of type $alu.
Using template $paramod$c10ac5f0b39b38dcd38e1afdf08560e278248653\_80_ice40_alu for cells of type $alu.
Using template $paramod$93b49458bab1c00eb32aff458c583f46ff61e60f\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using extmapper maccmap for cells of type $macc.
  add { $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [9:0] } * { $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [20] $flatten\spb.$sub$src/sphere.v:16$7_Y [9:0] } (21x21 bits, unsigned)
  add { $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [9:0] } * { $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [20] $flatten\spr.$sub$src/sphere.v:18$10_Y [9:0] } (21x21 bits, unsigned)
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_80_ice40_alu for cells of type $alu.
  add { $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [9:0] } * { $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [20] $flatten\spg.$sub$src/sphere.v:16$7_Y [9:0] } (21x21 bits, unsigned)
  add { $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [9:0] } * { $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [20] $flatten\spr.$sub$src/sphere.v:16$7_Y [9:0] } (21x21 bits, unsigned)
  add { $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [9:0] } * { $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [20] $flatten\spg.$sub$src/sphere.v:18$10_Y [9:0] } (21x21 bits, unsigned)
Using template $paramod$9435c5d1754b4ba447dbc8df7292896886717b68\_80_ice40_alu for cells of type $alu.
  add { $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [9:0] } * { $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [20] $flatten\spb.$sub$src/sphere.v:18$10_Y [9:0] } (21x21 bits, unsigned)
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_80_ice40_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010101 for cells of type $fa.
No more expansions possible.
<suppressed ~1963 debug messages>

5.32. Executing OPT pass (performing simple optimizations).

5.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~9074 debug messages>

5.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~7809 debug messages>
Removed a total of 2603 cells.

5.32.3. Executing OPT_DFF pass (perform DFF optimizations).

5.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 553 unused cells and 2580 unused wires.
<suppressed ~554 debug messages>

5.32.5. Finished fast OPT passes.

5.33. Executing ICE40_OPT pass (performing simple optimizations).

5.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1000.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1000.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1009.slice[0].carry: CO=\core.hscan_pos [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1022.slice[0].carry: CO=\core.hscan_pos [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1025.slice[0].carry: CO=\core.vscan_pos [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1028.slice[21].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1034.slice[0].carry: CO=\spb.spdcnt [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1037.slice[0].carry: CO=\spb.current_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1040.slice[0].carry: CO=\spb.current_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1043.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1043.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1046.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1046.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1052.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1052.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1055.slice[0].carry: CO=\spb.current_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1058.slice[0].carry: CO=\spb.current_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1061.slice[21].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1067.slice[0].carry: CO=\spg.spdcnt [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1070.slice[0].carry: CO=\spg.current_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1073.slice[0].carry: CO=\spg.current_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1076.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1076.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1079.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1079.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1085.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1085.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1088.slice[0].carry: CO=\spg.current_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1091.slice[0].carry: CO=\spg.current_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1094.slice[21].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1100.slice[0].carry: CO=\spr.spdcnt [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1103.slice[0].carry: CO=\spr.current_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1106.slice[0].carry: CO=\spr.current_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1109.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1109.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1112.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1112.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1118.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1118.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1121.slice[0].carry: CO=\spr.current_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1124.slice[0].carry: CO=\spr.current_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$767.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1106.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$778.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1103.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$789.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$789.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$800.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1100.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$807.slice[0].carry: CO=\spr.current_h [5]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$818.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1103.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$823.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$823.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$834.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1073.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$845.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1070.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$856.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$856.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$867.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$867.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$874.slice[0].carry: CO=\spg.current_h [5]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$885.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1070.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$890.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$890.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$901.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1040.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$912.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1037.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$923.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$923.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$934.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$934.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$941.slice[0].carry: CO=\spb.current_h [5]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$952.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1037.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$957.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$957.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$968.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1000.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$979.slice[0].carry: CO=\core.hscan_pos [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$984.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1000.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$995.slice[0].carry: CO=\core.hscan_pos [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1778.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1907.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2313.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2416.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2568.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2855.slice[0].carry: CO=1'0

5.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~107 debug messages>

5.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

5.33.4. Executing OPT_DFF pass (perform DFF optimizations).

5.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 21 unused cells and 9 unused wires.
<suppressed ~22 debug messages>

5.33.6. Rerunning OPT passes. (Removed registers in this run.)

5.33.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1778.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1907.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2313.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2416.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2568.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2855.slice[1].carry: CO=1'0

5.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

5.33.10. Executing OPT_DFF pass (perform DFF optimizations).

5.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.33.12. Rerunning OPT passes. (Removed registers in this run.)

5.33.13. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1778.slice[2].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1907.slice[2].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2313.slice[2].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2416.slice[2].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2568.slice[2].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2855.slice[2].carry: CO=1'0

5.33.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.33.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.33.16. Executing OPT_DFF pass (perform DFF optimizations).

5.33.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.33.18. Rerunning OPT passes. (Removed registers in this run.)

5.33.19. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1778.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1907.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2313.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2416.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2568.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2855.slice[3].carry: CO=1'0

5.33.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.33.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.33.22. Executing OPT_DFF pass (perform DFF optimizations).

5.33.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.33.24. Rerunning OPT passes. (Removed registers in this run.)

5.33.25. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1778.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1907.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2313.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2416.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2568.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2855.slice[4].carry: CO=1'0

5.33.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.33.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.33.28. Executing OPT_DFF pass (perform DFF optimizations).

5.33.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.33.30. Rerunning OPT passes. (Removed registers in this run.)

5.33.31. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1778.slice[5].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1907.slice[5].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2313.slice[5].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2416.slice[5].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2568.slice[5].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2855.slice[5].carry: CO=1'0

5.33.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.33.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.33.34. Executing OPT_DFF pass (perform DFF optimizations).

5.33.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.33.36. Rerunning OPT passes. (Removed registers in this run.)

5.33.37. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1778.slice[6].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1907.slice[6].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2313.slice[6].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2416.slice[6].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2568.slice[6].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2855.slice[6].carry: CO=1'0

5.33.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.33.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.33.40. Executing OPT_DFF pass (perform DFF optimizations).

5.33.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.33.42. Rerunning OPT passes. (Removed registers in this run.)

5.33.43. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$1907.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2313.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2416.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2568.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$maccmap.cc:240:synth$2855.slice[7].carry: CO=1'0

5.33.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.33.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.33.46. Executing OPT_DFF pass (perform DFF optimizations).

5.33.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.33.48. Rerunning OPT passes. (Removed registers in this run.)

5.33.49. Running ICE40 specific optimizations.

5.33.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.33.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.33.52. Executing OPT_DFF pass (perform DFF optimizations).

5.33.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.33.54. Finished OPT passes. (There is nothing left to do.)

5.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

5.35. Executing TECHMAP pass (map to technology primitives).

5.35.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

5.35.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~224 debug messages>

5.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1022.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1025.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1028.slice[21].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1034.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1037.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1040.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1043.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1046.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1052.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1055.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1058.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1061.slice[21].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1067.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1070.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1073.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1076.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1079.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1085.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1088.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1091.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1094.slice[21].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1100.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1103.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1106.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1109.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1112.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1118.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1121.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1124.slice[0].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1778.slice[0].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1778.slice[1].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1778.slice[2].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1778.slice[3].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1778.slice[4].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1778.slice[5].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1778.slice[6].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1907.slice[0].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1907.slice[2].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1907.slice[3].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1907.slice[4].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1907.slice[5].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1907.slice[6].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$1907.slice[7].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2313.slice[0].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2313.slice[2].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2313.slice[3].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2313.slice[4].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2313.slice[5].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2313.slice[6].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2313.slice[7].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2416.slice[0].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2416.slice[2].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2416.slice[3].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2416.slice[4].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2416.slice[5].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2416.slice[6].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2416.slice[7].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2568.slice[0].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2568.slice[2].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2568.slice[3].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2568.slice[4].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2568.slice[5].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2568.slice[6].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2568.slice[7].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2855.slice[0].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2855.slice[2].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2855.slice[3].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2855.slice[4].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2855.slice[5].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2855.slice[6].carry ($lut).
Mapping top.$auto$maccmap.cc:240:synth$2855.slice[7].carry ($lut).

5.38. Executing ICE40_OPT pass (performing simple optimizations).

5.38.1. Running ICE40 specific optimizations.

5.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1020 debug messages>

5.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~870 debug messages>
Removed a total of 290 cells.

5.38.4. Executing OPT_DFF pass (perform DFF optimizations).

5.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 41 unused cells and 1602 unused wires.
<suppressed ~42 debug messages>

5.38.6. Rerunning OPT passes. (Removed registers in this run.)

5.38.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1028.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1031.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1061.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1064.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1094.slice[1].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1097.slice[1].carry: CO=1'0

5.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~6 debug messages>

5.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.38.10. Executing OPT_DFF pass (perform DFF optimizations).

5.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.38.12. Rerunning OPT passes. (Removed registers in this run.)

5.38.13. Running ICE40 specific optimizations.

5.38.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.38.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.38.16. Executing OPT_DFF pass (perform DFF optimizations).

5.38.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.38.18. Finished OPT passes. (There is nothing left to do.)

5.39. Executing TECHMAP pass (map to technology primitives).

5.39.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

5.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

5.40. Executing ABC pass (technology mapping using ABC).

5.40.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 5902 gates and 6470 wires to a netlist network with 567 inputs and 621 outputs.

5.40.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =    2515.
ABC: Participating nodes from both networks       =    5166.
ABC: Participating nodes from the first network   =    2515. (  95.99 % of nodes)
ABC: Participating nodes from the second network  =    2651. ( 101.18 % of nodes)
ABC: Node pairs (any polarity)                    =    2515. (  95.99 % of names can be moved)
ABC: Node pairs (same polarity)                   =    1857. (  70.88 % of names can be moved)
ABC: Total runtime =     0.09 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

5.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     2618
ABC RESULTS:        internal signals:     5282
ABC RESULTS:           input signals:      567
ABC RESULTS:          output signals:      621
Removing temp directory.

5.41. Executing ICE40_WRAPCARRY pass (wrap carries).

5.42. Executing TECHMAP pass (map to technology primitives).

5.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

5.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 341 unused cells and 1882 unused wires.

5.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:     3078
  1-LUT              268
  2-LUT              622
  3-LUT             1358
  4-LUT              830
  with \SB_CARRY    (#0)  437
  with \SB_CARRY    (#1)  476

Eliminating LUTs.
Number of LUTs:     3078
  1-LUT              268
  2-LUT              622
  3-LUT             1358
  4-LUT              830
  with \SB_CARRY    (#0)  437
  with \SB_CARRY    (#1)  476

Combining LUTs.
Number of LUTs:     2994
  1-LUT              268
  2-LUT              532
  3-LUT             1286
  4-LUT              908
  with \SB_CARRY    (#0)  437
  with \SB_CARRY    (#1)  476

Eliminated 0 LUTs.
Combined 84 LUTs.
<suppressed ~11471 debug messages>

5.44. Executing TECHMAP pass (map to technology primitives).

5.44.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

5.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$710e2f28b833d9ff9835883514d3e174c73017ba\$lut for cells of type $lut.
Using template $paramod$5766b753e513aa2393ffc25ef94ebc79dc098484\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$3c17fcbb332f03cef33f214b93f1f99815920a16\$lut for cells of type $lut.
Using template $paramod$856c0dcb815917dd823d16c42afb9313717d987b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01100000 for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$58cdfd909af93eae999fb983a59991c983f4bc49\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$ec731ba0b03f9a8c2f9a148aad53e934d7e8d215\$lut for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$a2d3e8afe001623b5eeff20f461d89170000d7bc\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$deba17538f4cd4af4a7f03bc51507e8ef8b1d7d8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101001 for cells of type $lut.
Using template $paramod$f3e1547c4b47e64c590e75cf09078b2507c8cc75\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01111000 for cells of type $lut.
Using template $paramod$06b5f7e5a17024622a77ecd9b5b6f113e0b34c96\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000111 for cells of type $lut.
Using template $paramod$1f3b67373a23476b64a6ed61bde9dbe9df1086de\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101011 for cells of type $lut.
Using template $paramod$7e81a8ad8f27fccecc6e805c0ccf27dd70f2d2c2\$lut for cells of type $lut.
Using template $paramod$4bd0e644fd52ebb3b742e9f12861aec7d7c3e8e0\$lut for cells of type $lut.
Using template $paramod$cb92beff9eab733e7181d891fbc8c3950b9abc0a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$e56d99447d8a3ece8eda45209ed4b9fdcdbf8d26\$lut for cells of type $lut.
Using template $paramod$595b4955041ceff09e28d600fe79275c24ba9878\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00101011 for cells of type $lut.
Using template $paramod$c1ecd13b5e2feb77a725850b71cc8207f7841c40\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$a59507d273cd827eb6c46c37820d50a1b717efdf\$lut for cells of type $lut.
Using template $paramod$ec37958480699d8ec4c44f21f7d809daea40b1a4\$lut for cells of type $lut.
Using template $paramod$da2f95476331ffa2143f8212db8aff730de806a0\$lut for cells of type $lut.
Using template $paramod$82b4a585d1edcb5c6e755dc9bd3392228a1c1304\$lut for cells of type $lut.
Using template $paramod$fceb3a526de44b8f6b38e567360f59f7cf5878fb\$lut for cells of type $lut.
Using template $paramod$78e1751931755f088c8bc676bcbc3bb642c26bfc\$lut for cells of type $lut.
Using template $paramod$50b99034fbf984a51c265442496081454147f31e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110010 for cells of type $lut.
Using template $paramod$9843d77d4773ab424562cc9655d50a1bc2125488\$lut for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod$e5cb8e913f4daae476fde2b364998f21967f1f08\$lut for cells of type $lut.
Using template $paramod$b66cde2bcb2928dc1b0156b3a12a8631bfc32d9e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110001 for cells of type $lut.
Using template $paramod$014b659db5d002405936b374e32d204782099707\$lut for cells of type $lut.
Using template $paramod$6c15da6150ce36eeff7fb8c09f7ef22f5448d679\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010100 for cells of type $lut.
Using template $paramod$4b2507a321cf4c4a2ff3a563389beaacd54f9209\$lut for cells of type $lut.
Using template $paramod$aa471ad16d82a5785a3cf3d18330169d6ba4059c\$lut for cells of type $lut.
Using template $paramod$8466aae7f3132f822e70bbd8738850d820750479\$lut for cells of type $lut.
Using template $paramod$3039c7f41767c4672f4e3f22ad78f16d42720fbf\$lut for cells of type $lut.
Using template $paramod$c9994e2a733aa21e4bfe57075af37a9c5257c791\$lut for cells of type $lut.
Using template $paramod$7927bcf0ebf9ad32c99c221ff948f324620c5795\$lut for cells of type $lut.
Using template $paramod$9ce3cb48532e1935dedb6055756fefa71d90eef1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$5b13d2ee598c87cdbe912286a35c6fd102e2087c\$lut for cells of type $lut.
Using template $paramod$868427562418b5dc988caeac6a54689ec9c9025e\$lut for cells of type $lut.
Using template $paramod$89ce1067ddd7d1b862c35a14cf05e043d151c807\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod$c5b694ec89d7629b942ccf6a9be1d39e24f8edec\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod$041aa1dcdd60d3c4ff6eb6326c9e544a0334c607\$lut for cells of type $lut.
Using template $paramod$6b6967672cddfbe12dea2c030f112bffb1ec18d1\$lut for cells of type $lut.
Using template $paramod$765dca61dbfa835dacf2a260c8a4c5a36939a046\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001111 for cells of type $lut.
Using template $paramod$e96de5e9fcce737e52eacf39c70c8f533dc27d63\$lut for cells of type $lut.
Using template $paramod$54dc9aafe6e8a348026d60f9910d7f8d3f4d92e9\$lut for cells of type $lut.
Using template $paramod$4adb41216162ad4c68ce9ea5c48385c753262ac3\$lut for cells of type $lut.
Using template $paramod$017d8c8b5f8f0bd543e7b1e7d026dcb67424a519\$lut for cells of type $lut.
Using template $paramod$edc3c77d6d0cfa370b4c94131cecc413b4b0ef1c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod$a7525d6325624175b6d35e147c6b4ef5a57d7daa\$lut for cells of type $lut.
Using template $paramod$3f0549729b9cf7d6fa6533d688d092bceca9764e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011110 for cells of type $lut.
Using template $paramod$46f6707869970ff81dfceda816a4ec7d9f0b7345\$lut for cells of type $lut.
Using template $paramod$7d791c2363f4f019348f93a148b2a44b4ba6b5b3\$lut for cells of type $lut.
Using template $paramod$19232694b104ec9f70ceb28797a5ac59e9b4cb1a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110100 for cells of type $lut.
Using template $paramod$12879138d1e376f344e47ea40be66b776233be75\$lut for cells of type $lut.
Using template $paramod$0895a3fc3fcf9c230df6168b730504c93f90c3cc\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$7c9b07f152d8eb06c94fd2f48e97de07bf50f98b\$lut for cells of type $lut.
Using template $paramod$59ad7643a6592a7af331878e9c90559a0d5892f1\$lut for cells of type $lut.
Using template $paramod$243c00f5eb9faa1d5ce3478fdc389a56070781f8\$lut for cells of type $lut.
Using template $paramod$a5d3da563b51fac23a710ae7cb3e8ce69cd22c5e\$lut for cells of type $lut.
Using template $paramod$af2b970363478c934f632261f05f42c59b0d7a99\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000001 for cells of type $lut.
Using template $paramod$a547ebbcb936a0942e18c1762283837f76f0003a\$lut for cells of type $lut.
Using template $paramod$1a64f21ea15b05b7fc930804a66f6689ebbd6394\$lut for cells of type $lut.
Using template $paramod$98d40e23bb57d56e14345fb0942003de3e361f25\$lut for cells of type $lut.
Using template $paramod$6a34cd5b50e324824168b4186d0b04ba5e83b039\$lut for cells of type $lut.
Using template $paramod$729aa850e969bb9bb1c205734876853e142656d4\$lut for cells of type $lut.
Using template $paramod$046eaf70a766ad8e1ac394fe9e7ab1cd3d97aef0\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000001 for cells of type $lut.
Using template $paramod$986569468136396bfb899d9fcf8f75bcabc8cd05\$lut for cells of type $lut.
Using template $paramod$c3e1dc7b9e539f115f21c9fa61c94c4df05b91c1\$lut for cells of type $lut.
Using template $paramod$2bdfdda73873e8931790d872b72220895e67fee5\$lut for cells of type $lut.
Using template $paramod$5858bd6d78d6f4fef506811d9419710ec77e5fb5\$lut for cells of type $lut.
Using template $paramod$c46e26e5a927423cd46556d9948ab62bff492185\$lut for cells of type $lut.
Using template $paramod$6d23198eb2b8f79a41c7626605a61009695893b1\$lut for cells of type $lut.
Using template $paramod$44b90213621c1b4a9fa338f7f73c0da64fb66683\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01011100 for cells of type $lut.
Using template $paramod$be14281e005b87d8eeccfe8078fde13501f62397\$lut for cells of type $lut.
Using template $paramod$821131537f5bd0b4836f5026076702f8fb1bcdf3\$lut for cells of type $lut.
Using template $paramod$e443226d2503002a2dd72afead5923712f86d5f1\$lut for cells of type $lut.
Using template $paramod$9d707d218adbd63b6f9a0c79d7ee037306fb6296\$lut for cells of type $lut.
Using template $paramod$0de052767abdccc3aefc818722bdc3c7850d25d6\$lut for cells of type $lut.
Using template $paramod$52edd4fa7a6923608f0bc69e770b422f9a245a97\$lut for cells of type $lut.
Using template $paramod$e9c77024ca501b890c641f9c0b10e27242db8730\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110001 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod$ed10455c824c2a3761aabdeb1e31dad905f66e6e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$e5759512db67494ff77fbdfc66dff4006376568f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
No more expansions possible.
<suppressed ~4700 debug messages>
Removed 0 unused cells and 7042 unused wires.

5.45. Executing AUTONAME pass.
Renamed 205358 objects in module top (171 iterations).
<suppressed ~5199 debug messages>

5.46. Executing HIERARCHY pass (managing design hierarchy).

5.46.1. Analyzing design hierarchy..
Top module:  \top

5.46.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

5.47. Printing statistics.

=== top ===

   Number of wires:               1356
   Number of wire bits:           5957
   Number of public wires:        1356
   Number of public wire bits:    5957
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3934
     SB_CARRY                      737
     SB_DFF                          5
     SB_DFFE                        24
     SB_DFFESR                      66
     SB_DFFESS                      22
     SB_DFFSR                       85
     SB_LUT4                      2994
     SB_PLL40_PAD                    1

5.48. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

5.49. Executing JSON backend.

Warnings: 10 unique messages, 10 total
End of script. Logfile hash: 3ba7a74f83, CPU: user 4.58s system 0.04s, MEM: 71.04 MB peak
Yosys 0.12 (git sha1 2156e20)
Time spent: 25% 32x opt_expr (1 sec), 23% 1x abc (1 sec), ...
